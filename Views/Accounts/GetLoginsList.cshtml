@model IEnumerable<JsonDemo.Models.Login>
@{

    var loggedUsersId = (List<int>)ViewBag.LoggedUsersId;
    int count = Model.Count();
    List<JsonDemo.Models.Login> logins = Model.ToList();
    int index = 0;
    while (index < count)
    {
        var login = logins[index];
        var shiftedLoginDate = login.LoginDate.AddHours((int)Session["TimeZoneOffset"]);
        var shiftedLogoutDate = login.LogoutDate.AddHours((int)Session["TimeZoneOffset"]);
        int currentDay = shiftedLoginDate.Day;
        object param = new { day = login.LoginDate.ToShortDateString().Trim() };
        <details open>
            <summary>
                @shiftedLoginDate.ToShortDateString()
                <div style="position:relative; width:100%;left:120px; top:-33px; z-index:1">
                    @Helper.IconConfirmCmdWithParam("Accounts", "DeleteJournalDay", param, " redIcon fa-times", "Effacer la journée du " + shiftedLoginDate.ToShortDateString())
                </div>
            </summary>

            @do
            {
                <div class="loginJournalLayout">
                    <div>@Helper.AvatarUser(login.User, "UserSmallAvatar")</div>
                    <div>@shiftedLoginDate.ToShortTimeString()</div>

                    @if (shiftedLoginDate != shiftedLogoutDate)
                    {
                        <div>-</div>
                        <div>@shiftedLogoutDate.ToShortTimeString()</div>
                    }
                    else
                    {
                        if (loggedUsersId.Contains(login.User.Id))
                        {
                            loggedUsersId.Remove(login.User.Id);
                            <div>-</div>
                            <div title="Est en ligne en ce moment">@Helper.OnLineStatusIcon(true, false)</div>
                        }
                        else
                        {
                            <div>-</div>
                            <div>@Helper.TimeOutIcon()</div>
                        }
                    }

                    @if (true && login.IpAddress != "::1" && login.CountryCode != null)
                    {
                        <div>
                            @Helper.CountryFlag(login.CountryCode.ToLower())
                        </div>
                        <div class="IP_Address">
                            @login.IpAddress, @login.City, @login.RegionName
                        </div>
                    }
                    else
                    {
                        <div>&nbsp;</div>
                    }

                </div>
                index++;
                if (index < count)
                {
                    login = logins[index];
                    shiftedLoginDate = login.LoginDate.AddHours((int)Session["TimeZoneOffset"]);
                    shiftedLogoutDate = login.LogoutDate.AddHours((int)Session["TimeZoneOffset"]);
                }
            } while (index < count && currentDay == shiftedLoginDate.Day);
        </details>
    }
}
